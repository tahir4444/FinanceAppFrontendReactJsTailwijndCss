name: Frontend CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      htaccess-changed: ${{ steps.check-htaccess.outputs.changed }}
    
    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check if .htaccess Changed
        id: check-htaccess
        run: |
          # Handle case where there's no previous commit (first push)
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 First commit detected - will deploy .htaccess"
          elif git diff --name-only HEAD~1 HEAD | grep -q "^\.htaccess$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 .htaccess file has changed - will deploy it"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "✅ .htaccess unchanged - will preserve existing file"
          fi

      - name: 🛠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ✍️ Build Frontend for Server 2
        run: |
          rm -rf dist/
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL_2 }}" >> .env
          npm run build
          mkdir -p builds/server2
          cp -r dist/* builds/server2/
          
          # Only copy .htaccess if it has changed
          if [ "${{ steps.check-htaccess.outputs.changed }}" == "true" ]; then
            if [ -f ".htaccess" ]; then
              echo "📝 .htaccess changed - copying new version to build directory"
              cp .htaccess builds/server2/
            else
              echo "❌ .htaccess marked as changed but file not found in repository root"
              exit 1
            fi
          else
            echo "✅ .htaccess unchanged - will preserve existing file on server"
          fi

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-server2
          path: builds/server2/
          retention-days: 1

  deploy-server2:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Download Server 2 Build
        uses: actions/download-artifact@v4
        with:
          name: build-server2
          path: ./build

      - name: 🧹 Backup and Clean Target Directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            BACKUP_FILE="/tmp/htaccess_backup_$(date +%s)"
            
            echo "🧹 Preparing target directory: $TARGET_DIR"
            
            # Backup .htaccess if it exists and hasn't changed
            if [ "${{ needs.build.outputs.htaccess-changed }}" != "true" ] && [ -f "$TARGET_DIR/.htaccess" ]; then
              echo "💾 Backing up existing .htaccess (unchanged)"
              cp "$TARGET_DIR/.htaccess" "$BACKUP_FILE"
              echo "$BACKUP_FILE" > /tmp/htaccess_backup_path
              echo "✅ .htaccess backed up to $BACKUP_FILE"
            else
              echo "🆕 .htaccess changed or doesn't exist - no backup needed"
              echo "" > /tmp/htaccess_backup_path
            fi
            
            # Clean target directory
            if [ -d "$TARGET_DIR" ]; then
              echo "📁 Cleaning target directory contents..."
              sudo rm -rf "$TARGET_DIR"/* 2>/dev/null || echo "⚠️ Some files couldn't be removed"
              sudo rm -rf "$TARGET_DIR"/.[^.]* 2>/dev/null || echo "⚠️ Some hidden files couldn't be removed"
              sudo chown -R $USER:$USER "$TARGET_DIR" 2>/dev/null || echo "⚠️ Couldn't change ownership"
              sudo chmod -R 755 "$TARGET_DIR" 2>/dev/null || echo "⚠️ Couldn't change permissions"
            else
              echo "📁 Creating target directory..."
              sudo mkdir -p "$TARGET_DIR"
              sudo chown -R $USER:$USER "$TARGET_DIR"
              sudo chmod -R 755 "$TARGET_DIR"
            fi
            
            echo "✅ Target directory prepared for deployment"

      - name: 🚀 Deploy Build Files to Server 2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'build/*'
          target: ${{ secrets.SERVER2_APP_PATH }}
          strip_components: 1
          rm: false
          overwrite: true
          timeout: 120s

      - name: 🔧 Handle .htaccess File
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 60s
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            
            echo "🔍 Current .htaccess status in target directory:"
            ls -la "$TARGET_DIR" | grep -E "(\.htaccess|total)" || echo "No .htaccess visible in listing"
            
            if [ "${{ needs.build.outputs.htaccess-changed }}" == "true" ]; then
              echo "🆕 .htaccess was marked as changed - should be deployed with build files"
              if [ -f "$TARGET_DIR/.htaccess" ]; then
                echo "✅ New .htaccess found in deployment"
                chmod 644 "$TARGET_DIR/.htaccess"
                chown $USER:$USER "$TARGET_DIR/.htaccess" 2>/dev/null || true
                echo "📝 New .htaccess permissions set to 644"
                echo "📄 New .htaccess content (first 5 lines):"
                head -5 "$TARGET_DIR/.htaccess" 2>/dev/null || echo "Could not read .htaccess content"
              else
                echo "❌ .htaccess should have been deployed but not found"
                echo "🔍 Checking if .htaccess exists in repository and build:"
                echo "Repository root should contain .htaccess for this to work"
              fi
            else
              echo "♻️ .htaccess unchanged - attempting to restore from backup"
              BACKUP_RESTORED=false
              
              if [ -f "/tmp/htaccess_backup_path" ]; then
                BACKUP_PATH=$(cat /tmp/htaccess_backup_path 2>/dev/null || echo "")
                if [ -n "$BACKUP_PATH" ] && [ -f "$BACKUP_PATH" ]; then
                  echo "🔄 Restoring .htaccess from: $BACKUP_PATH"
                  cp "$BACKUP_PATH" "$TARGET_DIR/.htaccess"
                  chmod 644 "$TARGET_DIR/.htaccess"
                  chown $USER:$USER "$TARGET_DIR/.htaccess" 2>/dev/null || true
                  rm "$BACKUP_PATH" "/tmp/htaccess_backup_path" 2>/dev/null || true
                  echo "✅ .htaccess restored from backup"
                  BACKUP_RESTORED=true
                else
                  echo "⚠️ Backup path found but file doesn't exist: '$BACKUP_PATH'"
                fi
              else
                echo "⚠️ No backup path file found at /tmp/htaccess_backup_path"
              fi
              
              if [ "$BACKUP_RESTORED" = "false" ]; then
                echo "🔍 No backup restored - checking if .htaccess exists anyway:"
                if [ -f "$TARGET_DIR/.htaccess" ]; then
                  echo "✅ .htaccess exists (possibly from previous deployment)"
                  chmod 644 "$TARGET_DIR/.htaccess"
                  chown $USER:$USER "$TARGET_DIR/.htaccess" 2>/dev/null || true
                else
                  echo "❌ No .htaccess file found - this might cause routing issues"
                  echo "💡 Consider adding a .htaccess file to your repository root"
                fi
              fi
            fi
            
            echo "🔍 Final .htaccess status:"
            if [ -f "$TARGET_DIR/.htaccess" ]; then
              ls -la "$TARGET_DIR/.htaccess"
              echo "📏 File size: $(wc -c < "$TARGET_DIR/.htaccess") bytes"
            else
              echo "❌ No .htaccess file present after processing"
            fi

      - name: 🔁 Reload Apache Server 2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 90s
          command_timeout: 2m
          script: |
            echo "🔄 Reloading Apache configuration..."
            
            # Test Apache configuration first
            if sudo apache2ctl configtest 2>/dev/null; then
              echo "✅ Apache configuration test passed"
            else
              echo "⚠️ Apache configuration test failed - attempting reload anyway"
            fi
            
            # Reload Apache with timeout handling
            if timeout 30 sudo systemctl reload apache2; then
              echo "✅ Apache reloaded successfully"
            else
              echo "⚠️ Apache reload timed out or failed - trying restart"
              if timeout 30 sudo systemctl restart apache2; then
                echo "✅ Apache restarted successfully"
              else
                echo "❌ Apache restart failed"
                exit 1
              fi
            fi
            
            # Quick status check
            if sudo systemctl is-active apache2 >/dev/null 2>&1; then
              echo "✅ Apache is running"
            else
              echo "❌ Apache is not running"
              sudo systemctl status apache2 --no-pager -l
              exit 1
            fi

      - name: 🌐 Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            
            echo "🔍 Verifying deployment..."
            echo "📁 Directory contents:"
            ls -la "$TARGET_DIR"
            
            echo "🔍 Checking for key files..."
            
            if [ -f "$TARGET_DIR/index.html" ]; then
              echo "✅ index.html found"
            else
              echo "❌ index.html not found"
              exit 1
            fi
            
            if [ -d "$TARGET_DIR/assets" ]; then
              echo "✅ assets directory found"
            else
              echo "❌ assets directory not found"
              exit 1
            fi
            
            echo "🔍 Checking .htaccess status..."
            if [ -f "$TARGET_DIR/.htaccess" ]; then
              HTACCESS_SIZE=$(wc -c < "$TARGET_DIR/.htaccess")
              echo "✅ .htaccess file present (${HTACCESS_SIZE} bytes)"
              if [ "${{ needs.build.outputs.htaccess-changed }}" == "true" ]; then
                echo "🆕 .htaccess was updated in this deployment"
              else
                echo "♻️ .htaccess was preserved from previous deployment"
              fi
            else
              echo "⚠️ .htaccess file not found"
            fi
            
            echo "✅ Deployment verification completed successfully"

  deployment-summary:
    needs: [build, deploy-server2]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "🚀 Frontend Deployment Summary:"
          echo "================================"
          if [ "${{ needs.build.outputs.htaccess-changed }}" == "true" ]; then
            echo "🆕 .htaccess: UPDATED with new changes"
          else
            echo "♻️ .htaccess: PRESERVED (no changes detected)"
          fi
          echo "✅ Deployment completed successfully"