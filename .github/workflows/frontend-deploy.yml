name: Frontend CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      htaccess-changed: ${{ steps.check-htaccess.outputs.changed }}
    
    steps:
      - name: üßæ Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üîç Check if .htaccess Changed
        id: check-htaccess
        run: |
          # Handle case where there's no previous commit (first push)
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù First commit detected - will deploy .htaccess"
          elif git diff --name-only HEAD~1 HEAD | grep -q "^\.htaccess$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù .htaccess file has changed - will deploy it"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ .htaccess unchanged - will preserve existing file"
          fi

      - name: üõ† Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: ‚úçÔ∏è Build Frontend for Server 2
        run: |
          rm -rf dist/
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL_2 }}" >> .env
          npm run build
          mkdir -p builds/server2
          cp -r dist/* builds/server2/
          
          # Only copy .htaccess if it has changed
          if [ "${{ steps.check-htaccess.outputs.changed }}" == "true" ]; then
            if [ -f ".htaccess" ]; then
              echo "üìù .htaccess changed - copying new version to build directory"
              cp .htaccess builds/server2/
            else
              echo "‚ùå .htaccess marked as changed but file not found in repository root"
              exit 1
            fi
          else
            echo "‚úÖ .htaccess unchanged - will preserve existing file on server"
          fi

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-server2
          path: builds/server2/
          retention-days: 1

  deploy-server2:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Download Server 2 Build
        uses: actions/download-artifact@v4
        with:
          name: build-server2
          path: ./build

      - name: üßπ Backup and Clean Target Directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            BACKUP_FILE="/tmp/htaccess_backup_$(date +%s)"
            
            echo "üßπ Preparing target directory: $TARGET_DIR"
            
            # Backup .htaccess if it exists and hasn't changed
            if [ "${{ needs.build.outputs.htaccess-changed }}" != "true" ] && [ -f "$TARGET_DIR/.htaccess" ]; then
              echo "üíæ Backing up existing .htaccess (unchanged)"
              cp "$TARGET_DIR/.htaccess" "$BACKUP_FILE"
              echo "$BACKUP_FILE" > /tmp/htaccess_backup_path
              echo "‚úÖ .htaccess backed up to $BACKUP_FILE"
            else
              echo "üÜï .htaccess changed or doesn't exist - no backup needed"
              echo "" > /tmp/htaccess_backup_path
            fi
            
            # Clean target directory
            if [ -d "$TARGET_DIR" ]; then
              echo "üìÅ Cleaning target directory contents..."
              sudo rm -rf "$TARGET_DIR"/* 2>/dev/null || echo "‚ö†Ô∏è Some files couldn't be removed"
              sudo rm -rf "$TARGET_DIR"/.[^.]* 2>/dev/null || echo "‚ö†Ô∏è Some hidden files couldn't be removed"
              sudo chown -R $USER:$USER "$TARGET_DIR" 2>/dev/null || echo "‚ö†Ô∏è Couldn't change ownership"
              sudo chmod -R 755 "$TARGET_DIR" 2>/dev/null || echo "‚ö†Ô∏è Couldn't change permissions"
            else
              echo "üìÅ Creating target directory..."
              sudo mkdir -p "$TARGET_DIR"
              sudo chown -R $USER:$USER "$TARGET_DIR"
              sudo chmod -R 755 "$TARGET_DIR"
            fi
            
            echo "‚úÖ Target directory prepared for deployment"

      - name: üöÄ Deploy Build Files to Server 2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: 'build/*'
          target: ${{ secrets.SERVER2_APP_PATH }}
          strip_components: 1
          rm: false
          overwrite: true
          timeout: 120s

      - name: üîß Handle .htaccess File
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            
            if [ "${{ needs.build.outputs.htaccess-changed }}" == "true" ]; then
              # .htaccess changed - validate new file
              if [ -f "$TARGET_DIR/.htaccess" ]; then
                echo "‚úÖ New .htaccess deployed successfully"
                chmod 644 "$TARGET_DIR/.htaccess"
                chown $USER:$USER "$TARGET_DIR/.htaccess" 2>/dev/null || true
                echo "üìù New .htaccess permissions set"
                echo "üìÑ New .htaccess content (first 5 lines):"
                head -5 "$TARGET_DIR/.htaccess"
              else
                echo "‚ùå .htaccess was supposed to be deployed but not found"
                exit 1
              fi
            else
              # .htaccess unchanged - restore from backup
              if [ -f "/tmp/htaccess_backup_path" ]; then
                BACKUP_PATH=$(cat /tmp/htaccess_backup_path)
                if [ -n "$BACKUP_PATH" ] && [ -f "$BACKUP_PATH" ]; then
                  echo "üîÑ Restoring unchanged .htaccess from backup"
                  cp "$BACKUP_PATH" "$TARGET_DIR/.htaccess"
                  chmod 644 "$TARGET_DIR/.htaccess"
                  chown $USER:$USER "$TARGET_DIR/.htaccess" 2>/dev/null || true
                  rm "$BACKUP_PATH" "/tmp/htaccess_backup_path"
                  echo "‚úÖ Original .htaccess restored successfully"
                  echo "üìÑ Restored .htaccess content (first 5 lines):"
                  head -5 "$TARGET_DIR/.htaccess"
                else
                  echo "‚ö†Ô∏è No valid .htaccess backup - might be first deployment"
                fi
              else
                echo "‚ö†Ô∏è No backup path file found"
              fi
            fi

      - name: üîÅ Reload Apache Server 2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl reload apache2
            echo "‚úÖ Apache reloaded successfully"

      - name: üåê Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER2_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            TARGET_DIR="${{ secrets.SERVER2_APP_PATH }}"
            
            echo "üîç Verifying deployment..."
            echo "üìÅ Directory contents:"
            ls -la "$TARGET_DIR"
            
            # Check for key files
            if [ -f "$TARGET_DIR/index.html" ]; then